// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: tag.sql

package repository

import (
	"context"
)

const createTag = `-- name: CreateTag :one
INSERT INTO tag (
   name 
) VALUES (
    $1
) RETURNING id, name, updated_at, created_at
`

func (q *Queries) CreateTag(ctx context.Context, name string) (Tag, error) {
	row := q.queryRow(ctx, q.createTagStmt, createTag, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tag
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteTagStmt, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT id, name, updated_at, created_at FROM tag
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.queryRow(ctx, q.getTagStmt, getTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listTags = `-- name: ListTags :many
SELECT id, name, updated_at, created_at FROM tag
ORDER BY name
`

func (q *Queries) ListTags(ctx context.Context) ([]Tag, error) {
	rows, err := q.query(ctx, q.listTagsStmt, listTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTag = `-- name: UpdateTag :one
UPDATE tag
SET name = $2
WHERE id = $1
RETURNING id, name, updated_at, created_at
`

type UpdateTagParams struct {
	ID   int64  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (Tag, error) {
	row := q.queryRow(ctx, q.updateTagStmt, updateTag, arg.ID, arg.Name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
