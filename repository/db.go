// Code generated by sqlc. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createContactStmt, err = db.PrepareContext(ctx, createContact); err != nil {
		return nil, fmt.Errorf("error preparing query CreateContact: %w", err)
	}
	if q.createEntriesStmt, err = db.PrepareContext(ctx, createEntries); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEntries: %w", err)
	}
	if q.createTagStmt, err = db.PrepareContext(ctx, createTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTag: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteContactStmt, err = db.PrepareContext(ctx, deleteContact); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteContact: %w", err)
	}
	if q.deleteEntriesStmt, err = db.PrepareContext(ctx, deleteEntries); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEntries: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, deleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.getContactStmt, err = db.PrepareContext(ctx, getContact); err != nil {
		return nil, fmt.Errorf("error preparing query GetContact: %w", err)
	}
	if q.getEntriesStmt, err = db.PrepareContext(ctx, getEntries); err != nil {
		return nil, fmt.Errorf("error preparing query GetEntries: %w", err)
	}
	if q.getTagStmt, err = db.PrepareContext(ctx, getTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetTag: %w", err)
	}
	if q.getUserStmt, err = db.PrepareContext(ctx, getUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetUser: %w", err)
	}
	if q.listEntriesStmt, err = db.PrepareContext(ctx, listEntries); err != nil {
		return nil, fmt.Errorf("error preparing query ListEntries: %w", err)
	}
	if q.listTagStmt, err = db.PrepareContext(ctx, listTag); err != nil {
		return nil, fmt.Errorf("error preparing query ListTag: %w", err)
	}
	if q.updateContactStmt, err = db.PrepareContext(ctx, updateContact); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateContact: %w", err)
	}
	if q.updateEntriesStmt, err = db.PrepareContext(ctx, updateEntries); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateEntries: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, updateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createContactStmt != nil {
		if cerr := q.createContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createContactStmt: %w", cerr)
		}
	}
	if q.createEntriesStmt != nil {
		if cerr := q.createEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEntriesStmt: %w", cerr)
		}
	}
	if q.createTagStmt != nil {
		if cerr := q.createTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteContactStmt != nil {
		if cerr := q.deleteContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteContactStmt: %w", cerr)
		}
	}
	if q.deleteEntriesStmt != nil {
		if cerr := q.deleteEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEntriesStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.getContactStmt != nil {
		if cerr := q.getContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getContactStmt: %w", cerr)
		}
	}
	if q.getEntriesStmt != nil {
		if cerr := q.getEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEntriesStmt: %w", cerr)
		}
	}
	if q.getTagStmt != nil {
		if cerr := q.getTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagStmt: %w", cerr)
		}
	}
	if q.getUserStmt != nil {
		if cerr := q.getUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserStmt: %w", cerr)
		}
	}
	if q.listEntriesStmt != nil {
		if cerr := q.listEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listEntriesStmt: %w", cerr)
		}
	}
	if q.listTagStmt != nil {
		if cerr := q.listTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTagStmt: %w", cerr)
		}
	}
	if q.updateContactStmt != nil {
		if cerr := q.updateContactStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateContactStmt: %w", cerr)
		}
	}
	if q.updateEntriesStmt != nil {
		if cerr := q.updateEntriesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateEntriesStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                DBTX
	tx                *sql.Tx
	createContactStmt *sql.Stmt
	createEntriesStmt *sql.Stmt
	createTagStmt     *sql.Stmt
	createUserStmt    *sql.Stmt
	deleteContactStmt *sql.Stmt
	deleteEntriesStmt *sql.Stmt
	deleteTagStmt     *sql.Stmt
	getContactStmt    *sql.Stmt
	getEntriesStmt    *sql.Stmt
	getTagStmt        *sql.Stmt
	getUserStmt       *sql.Stmt
	listEntriesStmt   *sql.Stmt
	listTagStmt       *sql.Stmt
	updateContactStmt *sql.Stmt
	updateEntriesStmt *sql.Stmt
	updateTagStmt     *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                tx,
		tx:                tx,
		createContactStmt: q.createContactStmt,
		createEntriesStmt: q.createEntriesStmt,
		createTagStmt:     q.createTagStmt,
		createUserStmt:    q.createUserStmt,
		deleteContactStmt: q.deleteContactStmt,
		deleteEntriesStmt: q.deleteEntriesStmt,
		deleteTagStmt:     q.deleteTagStmt,
		getContactStmt:    q.getContactStmt,
		getEntriesStmt:    q.getEntriesStmt,
		getTagStmt:        q.getTagStmt,
		getUserStmt:       q.getUserStmt,
		listEntriesStmt:   q.listEntriesStmt,
		listTagStmt:       q.listTagStmt,
		updateContactStmt: q.updateContactStmt,
		updateEntriesStmt: q.updateEntriesStmt,
		updateTagStmt:     q.updateTagStmt,
	}
}
