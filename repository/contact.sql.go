// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: contact.sql

package repository

import (
	"context"
	"database/sql"
)

const createContact = `-- name: CreateContact :one
INSERT INTO contact (
   owner,
   github,
   twitter
) VALUES (
    $1, $2, $3
) RETURNING id, owner, github, twitter, updated_at, created_at
`

type CreateContactParams struct {
	Owner   string         `json:"owner"`
	Github  sql.NullString `json:"github"`
	Twitter sql.NullString `json:"twitter"`
}

func (q *Queries) CreateContact(ctx context.Context, arg CreateContactParams) (Contact, error) {
	row := q.queryRow(ctx, q.createContactStmt, createContact, arg.Owner, arg.Github, arg.Twitter)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Github,
		&i.Twitter,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteContact = `-- name: DeleteContact :exec
DELETE FROM contact
WHERE id = $1
`

func (q *Queries) DeleteContact(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteContactStmt, deleteContact, id)
	return err
}

const getContact = `-- name: GetContact :one
SELECT id, owner, github, twitter, updated_at, created_at FROM contact
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetContact(ctx context.Context, id int64) (Contact, error) {
	row := q.queryRow(ctx, q.getContactStmt, getContact, id)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Github,
		&i.Twitter,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateContact = `-- name: UpdateContact :one
UPDATE contact
SET owner = $2, github = $3, twitter = $4
WHERE id = $1
RETURNING id, owner, github, twitter, updated_at, created_at
`

type UpdateContactParams struct {
	ID      int64          `json:"id"`
	Owner   string         `json:"owner"`
	Github  sql.NullString `json:"github"`
	Twitter sql.NullString `json:"twitter"`
}

func (q *Queries) UpdateContact(ctx context.Context, arg UpdateContactParams) (Contact, error) {
	row := q.queryRow(ctx, q.updateContactStmt, updateContact,
		arg.ID,
		arg.Owner,
		arg.Github,
		arg.Twitter,
	)
	var i Contact
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Github,
		&i.Twitter,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
